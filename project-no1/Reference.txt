Building Blocks of Angular 
=====
  Components 
  Services  
  Guards
  Modules 
  Interceptor 

====
  Basic & Adv Concepts (Project #1)
    components interaction 
    databinding 
    routing 
    sharing data b/w diff components (Cross Component Communication)
      1. Parent to Child Component Communication 
          using custom attribute @Input() 
      2. Child to Parent Comp Communication 
          using custom event binding @Output() 
      3. Any to Any Comp Communication 
          3.1 using RxJS (Observables, Subject / Behaviour Subject, Subscription) 
          3.2 using NgRx (many do not have experience)

  Adv Concepts  
    RxJS 
    Unit Testing (many do not have experience) (project #1)
    HttpInterceptor (project #1 )
    Reusable component library a.k.a angular component library (many do not have experience) (project #2)
    CI / CD pipelines( project #1 or #2) 
    Angular 14 features 
    
  Third party tools
  ----
    NgRx (project #3)
    Angular Material (many do not have experience) (project #4)

    
Project Structure
======
  #1 -- Building block wise project structure 
    src/
      app/
        components/
          home/
        directives/
        services/
        modules/
        guards/
        pipes/
        shared/

  #2 -- Feature-wise or page-wise project structure (Recommended)
    src/
      app/
        shared/
          components/
            header/
            footer/
            menu/
        concepts/
          components/
            employee/
            ceb/
            ...
            ...
            ...
          directives/
            colorizer/
        about/
        home/
        users/
          components/
            add-user/
            user-details/
            users...
          services/
        ...
        ...
        ...
        ...
        ...

  #3 - Mixing both structure 
      src/
        app/
          home/
            components/
            directives/ 
            services/ 
          about/ 
            components/
            directives/ 
            services/ 
          shared/ 
            components/
              header/
              footer/


Data Binding 
---
  * keeping the data in ts file and displayin it in HTML 
  1. Interpolation [DONE]
      TS => HTML 
      {{}}

  2. Property Binding [DONE]
      TS => HTML 
      []
      2.1 Class Binding [TODO]
      2.2 Style Binding [TODO]

  3. Event Binding [DONE]
      TS <== HTML 
      ()

  4. Two Way Binding 
      TS <==> HTML 
      [(ngModel)]

  5. Custom Property Binding 
  6. Custom Event Binding 
   

Cross Component Commn 
----
  1. Parent to Child Component Commn [DONE]
      using Custom Property Binding 
  2. Child to Parent Component Commn [DONE]
      using Custom Event Binding 
  3. Any to Any Component Commn 
      3.1 using RxJS (Observables, Subject / Behaviour Subject, Subscription) 
          [45 mins to 1 hour]
      3.2 using NgRx (many do not have experience) [1.5 - 2.5 hours]

====
Directives 
===
  Special instructions to the DOM
  1. Attribute Directive
      examples: routerLink, routerLinkActive, routerLinkActiveOptions, formGroup, formControlName

  2. Structural Directive 
      *ngIf 
      *ngFor 
      ngSwitch 

  3. Custom Attribute Directive 
      ng g d directive-name

  4. Custom structural Directive 
      ng g d directive-name
        Refer: https://github.com/arunprabu/employee-mgmt-ng-oct2022/blob/master/src/app/concepts/directives/demo-if.directive.ts

        Refer: https://github.com/arunprabu/employee-mgmt-ng-oct2022/blob/master/src/app/concepts/directives/unless.directive.ts
=========

User Management (CRUD App)
-----
  1. Create User (Reactive Form)
      http://localhost:4200/users/add
      ng g c users/components/add-user -s 

  2. List Users 
      http://localhost:4200/users
      ng g c users/components/users -s 

  3. Fetch User Details by Id 
      http://localhost:4200/users/1 
      ng g c users/components/user-details -s 

  4. Update User (Template Driven Form)
      http://localhost:4200/users/1 

  5. Delete User (TODO)
      http://localhost:4200/users/1

  Feature Module  (Creating Main Switching Box)
  Feature Routing Module (Create Navigational map)
    Nested Routing / Child Routing 
    URL Param 
    Query Param 
  
  Angular Forms 
    1. Reactive Forms [RECOMMENDED]
        * easy 
        * built with html + ts 
        * validate thru angular validators
        * adv 
          ---
            1. suitable for unit testing 
            2. suitable for complex form validation 

        * disadv 
        ----- 
          * big learning curve

        Steps: 
        ----
          1. have html form [done]
          2. have TS equivalent for the html form tag and form inputs 
          3. connect both html form and ts equivalents 


    2. Template Driven Forms 
        * easiest 
        * built with html 
        * validations to be done with directives
        * disadv
        ---
          1. not suitable for unit testing 
          2. not suitable for complex form validation 
  
  Services 
    Rest API call 
    Http Client 
    RxJS 
      Observables, Subscription 


    


Class Commn 
--
  1. Thru Object creation (instantiation)
  2. thru inheritance 
  3. thru dep injection 


@Injectable({
  providedIn: 'root'
})
class RepairService {
  doRepair(){

  }
}

class Car  {
  constructor( private repairService: RepairService ){
    this.repairService.doRepair();
  }
}

class Bike {
  constructor( private repairService: RepairService ){
    this.repairService.doRepair();
  }

}

class Bus {
  constructor( private repairService: RepairService ){
    this.repairService.doRepair();
  }
}


===
What's Observable?
    It's a collection that returned over time. 
    It's a push, that sends multiple values
    Observable is like restaurant kitchen.
    If you subscribe to observable, it decides when to give information 
Now, What's RxJs?
    Various method of operators, you can chain on Observables to filter data, sort, 

Refer: My Example on Observables and RxJS.
http://jsbin.com/kuzifehivi/4/edit?html,js,console