Building Blocks of Angular 
=====
  Components 
  Services  
  Guards
  Modules 
  Interceptor 

====
  Basic & Adv Concepts (Project #1)
    components interaction 
    databinding 
    routing 
    sharing data b/w diff components (Cross Component Communication)
      1. Parent to Child Component Communication 
          using custom attribute @Input() 
      2. Child to Parent Comp Communication 
          using custom event binding @Output() 
      3. Any to Any Comp Communication 
          3.1 using RxJS (Observables, Subject / Behaviour Subject, Subscription) 
          3.2 using NgRx (many do not have experience)

  Adv Concepts  
    RxJS 
    Unit Testing (many do not have experience) (project #1)
    HttpInterceptor (project #1 )
    Reusable component library a.k.a angular component library (many do not have experience) (project #2)
    CI / CD pipelines( project #1 or #2) 
    Angular 14 features 
    
  Third party tools
  ----
    NgRx (project #3)
    Angular Material (many do not have experience) (project #4)

    
Project Structure
======
  #1 -- Building block wise project structure 
    src/
      app/
        components/
          home/
        directives/
        services/
        modules/
        guards/
        pipes/
        shared/

  #2 -- Feature-wise or page-wise project structure (Recommended)
    src/
      app/
        shared/
          components/
            header/
            footer/
            menu/
        concepts/
          components/
            employee/
            ceb/
            ...
            ...
            ...
          directives/
            colorizer/
        about/
        home/
        users/
          components/
            add-user/
            user-details/
            users...
          services/
        ...
        ...
        ...
        ...
        ...

  #3 - Mixing both structure 
      src/
        app/
          home/
            components/
            directives/ 
            services/ 
          about/ 
            components/
            directives/ 
            services/ 
          shared/ 
            components/
              header/
              footer/


Data Binding 
---
  * keeping the data in ts file and displayin it in HTML 
  1. Interpolation [DONE]
      TS => HTML 
      {{}}

  2. Property Binding [DONE]
      TS => HTML 
      []
      2.1 Class Binding [TODO]
      2.2 Style Binding [TODO]

  3. Event Binding [DONE]
      TS <== HTML 
      ()

  4. Two Way Binding 
      TS <==> HTML 
      [(ngModel)]

  5. Custom Property Binding 
  6. Custom Event Binding 
   

Cross Component Commn 
----
  1. Parent to Child Component Commn [DONE]
      using Custom Property Binding 
  2. Child to Parent Component Commn [DONE]
      2.1 using Custom Event Binding [DONE]
          * child comp has to send the data to parent thru event emitting
      2.2 using ViewChild() or ViewChildren()  [DONE]
          * the above will help the parent comp access the data from child 
  3. Any to Any Component Commn 
      3.1 using RxJS (Observables, Subject / Behaviour Subject, Subscription) 
          [45 mins to 1 hour]
      3.2 using NgRx (many do not have experience) [1.5 - 2.5 hours]

====
Directives 
===
  Special instructions to the DOM
  1. Attribute Directive
      examples: routerLink, routerLinkActive, routerLinkActiveOptions, formGroup, formControlName

  2. Structural Directive 
      *ngIf 
      *ngFor 
      ngSwitch 

  3. Custom Attribute Directive 
      ng g d directive-name

  4. Custom structural Directive 
      ng g d directive-name
        Refer: https://github.com/arunprabu/employee-mgmt-ng-oct2022/blob/master/src/app/concepts/directives/demo-if.directive.ts

        Refer: https://github.com/arunprabu/employee-mgmt-ng-oct2022/blob/master/src/app/concepts/directives/unless.directive.ts
=========

User Management (CRUD App)
-----
  1. Create User (Reactive Form)
      http://localhost:4200/users/add
      ng g c users/components/add-user -s 

  2. List Users 
      http://localhost:4200/users
      ng g c users/components/users -s 

  3. Fetch User Details by Id 
      http://localhost:4200/users/1 
      ng g c users/components/user-details -s 

  4. Update User (Template Driven Form)
      http://localhost:4200/users/1 

  5. Delete User (TODO)
      http://localhost:4200/users/1

  Feature Module  (Creating Main Switching Box)
  Feature Routing Module (Create Navigational map)
    Nested Routing / Child Routing 
    URL Param 
    Query Param 
  
  Angular Forms 
    1. Reactive Forms [RECOMMENDED]
        * easy 
        * built with html + ts 
        * validate thru angular validators
        * adv 
          ---
            1. suitable for unit testing 
            2. suitable for complex form validation 

        * disadv 
        ----- 
          * big learning curve

        Steps: 
        ----
          1. have html form [done]
          2. have TS equivalent for the html form tag and form inputs 
          3. connect both html form and ts equivalents 


    2. Template Driven Forms 
        * easiest 
        * built with html 
        * validations to be done with directives
        * disadv
        ---
          1. not suitable for unit testing 
          2. not suitable for complex form validation 
  
  Services 
    Rest API call 
    Http Client 
    RxJS 
      Observables, Subscription 


    


Class Commn 
--
  1. Thru Object creation (instantiation)
  2. thru inheritance 
  3. thru dep injection 


@Injectable({
  providedIn: 'root'
})
class RepairService {
  doRepair(){

  }
}

class Car  {
  constructor( private repairService: RepairService ){
    this.repairService.doRepair();
  }
}

class Bike {
  constructor( private repairService: RepairService ){
    this.repairService.doRepair();
  }

}

class Bus {
  constructor( private repairService: RepairService ){
    this.repairService.doRepair();
  }
}


===
What's Observable?
    It's a collection that returned over time. 
    It's a push, that sends multiple values
    Observable is like restaurant kitchen.
    If you subscribe to observable, it decides when to give information 
Now, What's RxJs?
    Various method of operators, you can chain on Observables to filter data, sort, 

Refer: My Example on Observables and RxJS.
http://jsbin.com/kuzifehivi/4/edit?html,js,console


====
Software Dev Methodology 
--
  Analysis => Design => [Development => Testing] => Deployment => Maintenance 

  [Dev => QA => (bugs) => Dev => QA => (bugs) => Dev => QA => (bugs) => Dev => QA => (QA Passed)] => Deployment 

Calc 
--

  Development Team
  ---
    Source Doc: FRD, Designs, HLD, LLD
    --

    feature: add
    ============
      Prepare Test cases
      ----
        1. add -- inputs should be numbers 
        2. add -- output should also be a number 
        3. if invalid inputs entered add button should be disabled 

      function add(a: number, b: number): number{
        return a + b;  
      }

      add(10, 20); // 30
      add(5, 2); // 7
    
    [TOOLS] 




Modern Software Dev Methodology as of 2023  / Testing Approach 
---
  1. Test Driven Development (TDD)
      * is a programming practice that instructs devs to write NEW CODE only if an automated test has failed 

      devs write test cases => (Instant feedback of failure) => devs write functionality => (Instant feedback of success)  => [CODE COMPLETE]
      
      Testing Pattern: AAA (Arrange, Act, Assert)
      Tools: JEST, Mocha and Chai 

  2. Behaviour Driven Development (BDD)  
      * is an agile s/w dev methodology 
      * an app documented and designed around the behaviour, the user expects to experience 
      when interacting with it 

      devs write test cases => (Instant feedback of failure) => devs write functionality => (Instant feedback of success) => [CODE COMPLETE]
      Testing Pattern: Given, When, Then 
      Tools: JasmineJS, Karma

  Dev's write test cases => Dev's write the functionality => (Tools) => [Instant Feedback of Success] => Deployment


Automated Testing 
---
  0. Static Type Checking 
      Tools: TypeScript / FlowJS / PropTypes in ReactJS 

  1. Unit Testing 
      * Testing small unit of a component 
      * Testing the comp in isolation (without connecting with REST API)
      * Individual units of the component would be tested 
      * Bug Reduction Density: 40 - 80%

      Tools: Jasmine JS (Framework) & Karma (Test Runner)

  2. Integration Testing 
      * Different units, modules or components tested as combined entity
      * Behaviour of the app woule be tested 
      * To expose issues in the integration of multiple units 
      
      Examples: test if a child comp can update the parent comp 

      Tools: Jasmine JS & Karma 
      
  3. End to End Testing (E2E)
      * Testing the whole app 
      * Usaully a multiple step test combining multiple units and integration tests into one big test 
      * Usually mocked or stubbed very little 
      * Tests are done in a simulated browser, there may be or may not be an UI while the test is running 
      * Examples: Testing the complete authentication flow 
      
      Tools: Protractor or CypressJS or Selenium or Puppeteer  


// How to write the test cases ?
// Where to write test cases? 
// How to test our app against the test cased we wrote? 


====
angular material [DONE]
Unit Testing 
NgRx 
ng library 


